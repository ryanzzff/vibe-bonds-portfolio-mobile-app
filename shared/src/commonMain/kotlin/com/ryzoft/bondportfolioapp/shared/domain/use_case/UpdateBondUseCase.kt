package com.ryzoft.bondportfolioapp.shared.domain.use_case

import com.ryzoft.bondportfolioapp.shared.domain.model.Bond
import com.ryzoft.bondportfolioapp.shared.domain.repository.BondRepository

/**
 * Use case for updating an existing bond in the repository.
 */
class UpdateBondUseCase(private val repository: BondRepository) {

    /**
     * Executes the use case.
     * @param bond The bond object with updated details. Must have a valid ID.
     * @throws InvalidBondException if the bond data is invalid or ID is missing.
     */
    suspend operator fun invoke(bond: Bond) {
        // Validation (ensure ID is present for update)
        if (bond.id <= 0) { // Assuming IDs generated by DB are positive
             throw InvalidBondException("Bond ID is required for update.")
        }
        if (bond.issuerName.isBlank()) {
            throw InvalidBondException("Issuer name cannot be empty.")
        }
        if (bond.couponRate < 0) {
            throw InvalidBondException("Coupon rate cannot be negative.")
        }
        if (bond.faceValuePerBond <= 0) {
            throw InvalidBondException("Face value must be positive.")
        }
        if (bond.quantityPurchased <= 0) {
            throw InvalidBondException("Quantity must be positive.")
        }
        if (bond.maturityDate < bond.purchaseDate) {
            throw InvalidBondException("Maturity date cannot be before purchase date.")
        }
        // Add more validation as needed...

        repository.updateBond(bond)
    }
}
